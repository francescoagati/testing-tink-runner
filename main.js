// Generated by Haxe 4.0.0-rc.2+77068e10c
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(((o) instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = intf[_g++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(((o) instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		if(o.__enum__ != null) {
			return $hxEnums[o.__enum__] == cl;
		} else {
			return false;
		}
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var tink_testrunner_SuiteObject = function() { };
tink_testrunner_SuiteObject.__name__ = "tink.testrunner.SuiteObject";
tink_testrunner_SuiteObject.prototype = {
	__class__: tink_testrunner_SuiteObject
};
var tink_testrunner_BasicSuite = function(info,cases,pos) {
	this.info = info;
	this.cases = cases;
	if(info.pos == null) {
		info.pos = pos;
	}
	var _g = 0;
	while(_g < cases.length) cases[_g++].suite = this;
};
tink_testrunner_BasicSuite.__name__ = "tink.testrunner.BasicSuite";
tink_testrunner_BasicSuite.__interfaces__ = [tink_testrunner_SuiteObject];
tink_testrunner_BasicSuite.prototype = {
	setup: function() {
		return tink_core__$Promise_Promise_$Impl_$.NOISE;
	}
	,before: function() {
		return tink_core__$Promise_Promise_$Impl_$.NOISE;
	}
	,after: function() {
		return tink_core__$Promise_Promise_$Impl_$.NOISE;
	}
	,teardown: function() {
		return tink_core__$Promise_Promise_$Impl_$.NOISE;
	}
	,__class__: tink_testrunner_BasicSuite
};
var Main = function() {
	var c = js_Boot.getClass(this);
	tink_testrunner_BasicSuite.call(this,{ name : c.__name__},[],{ fileName : "src/Main.hx", lineNumber : 17, className : "Main", methodName : "new"});
	this.testMain_1();
};
Main.__name__ = "Main";
Main.main = function() {
	tink_testrunner_Runner.run([new Main()]);
};
Main.__super__ = tink_testrunner_BasicSuite;
Main.prototype = $extend(tink_testrunner_BasicSuite.prototype,{
	testMain_1: function() {
		var left;
		try {
			left = false;
		} catch( ex ) {
			haxe_CallStack.lastException = ex;
			left = "exception: " + Std.string(((ex) instanceof js__$Boot_HaxeError) ? ex.val : ex) + hx_doctest_internal_DocTestUtils.exceptionStackAsString();
		}
		var right;
		try {
			right = false;
		} catch( ex1 ) {
			haxe_CallStack.lastException = ex1;
			right = "exception: " + Std.string(((ex1) instanceof js__$Boot_HaxeError) ? ex1.val : ex1) + hx_doctest_internal_DocTestUtils.exceptionStackAsString();
		}
		if(hx_doctest_internal_DocTestUtils.equals(left,right)) {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(true),"MyTools.isValidName(null)   == false",{ lineNumber : 28, fileName : "src/Main.hx", className : "", methodName : ""})));
		} else {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(false),"MyTools.isValidName(null)   == false --> Left side '" + Std.string(left) + "' does not equal '" + Std.string(right) + "'.",{ lineNumber : 28, fileName : "src/Main.hx", className : "", methodName : ""})));
		}
		var left1;
		try {
			left1 = "".length > 0;
		} catch( ex2 ) {
			haxe_CallStack.lastException = ex2;
			left1 = "exception: " + Std.string(((ex2) instanceof js__$Boot_HaxeError) ? ex2.val : ex2) + hx_doctest_internal_DocTestUtils.exceptionStackAsString();
		}
		var right1;
		try {
			right1 = false;
		} catch( ex3 ) {
			haxe_CallStack.lastException = ex3;
			right1 = "exception: " + Std.string(((ex3) instanceof js__$Boot_HaxeError) ? ex3.val : ex3) + hx_doctest_internal_DocTestUtils.exceptionStackAsString();
		}
		if(hx_doctest_internal_DocTestUtils.equals(left1,right1)) {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(true),"MyTools.isValidName(\"\")     == false",{ lineNumber : 29, fileName : "src/Main.hx", className : "", methodName : ""})));
		} else {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(false),"MyTools.isValidName(\"\")     == false --> Left side '" + Std.string(left1) + "' does not equal '" + Std.string(right1) + "'.",{ lineNumber : 29, fileName : "src/Main.hx", className : "", methodName : ""})));
		}
		var left2;
		try {
			left2 = "John".length > 0;
		} catch( ex4 ) {
			haxe_CallStack.lastException = ex4;
			left2 = "exception: " + Std.string(((ex4) instanceof js__$Boot_HaxeError) ? ex4.val : ex4) + hx_doctest_internal_DocTestUtils.exceptionStackAsString();
		}
		var right2;
		try {
			right2 = true;
		} catch( ex5 ) {
			haxe_CallStack.lastException = ex5;
			right2 = "exception: " + Std.string(((ex5) instanceof js__$Boot_HaxeError) ? ex5.val : ex5) + hx_doctest_internal_DocTestUtils.exceptionStackAsString();
		}
		if(hx_doctest_internal_DocTestUtils.equals(left2,right2)) {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(true),"MyTools.isValidName(\"John\") == true",{ lineNumber : 30, fileName : "src/Main.hx", className : "", methodName : ""})));
		} else {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(false),"MyTools.isValidName(\"John\") == true --> Left side '" + Std.string(left2) + "' does not equal '" + Std.string(right2) + "'.",{ lineNumber : 30, fileName : "src/Main.hx", className : "", methodName : ""})));
		}
		var left3 = "nothing";
		try {
			new MyObject(null);
		} catch( ex6 ) {
			haxe_CallStack.lastException = ex6;
			left3 = ((ex6) instanceof js__$Boot_HaxeError) ? ex6.val : ex6;
		}
		var right3;
		try {
			right3 = "[data] must not be null!";
		} catch( ex7 ) {
			haxe_CallStack.lastException = ex7;
			right3 = "exception: " + Std.string(((ex7) instanceof js__$Boot_HaxeError) ? ex7.val : ex7);
		}
		if(hx_doctest_internal_DocTestUtils.equals(left3,right3)) {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(true),"new MyObject(null) throws \"[data] must not be null!\"",{ lineNumber : 45, fileName : "src/Main.hx", className : "", methodName : ""})));
		} else {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(false),"new MyObject(null) throws \"[data] must not be null!\" --> Expected `" + Std.string(right3) + "` but was `" + Std.string(left3) + "`.",{ lineNumber : 45, fileName : "src/Main.hx", className : "", methodName : ""})));
		}
		var left4 = "nothing";
		try {
			new MyObject(null);
		} catch( ex8 ) {
			haxe_CallStack.lastException = ex8;
			left4 = ((ex8) instanceof js__$Boot_HaxeError) ? ex8.val : ex8;
		}
		var right4;
		try {
			right4 = new EReg("must not be null","");
		} catch( ex9 ) {
			haxe_CallStack.lastException = ex9;
			right4 = "exception: " + Std.string(((ex9) instanceof js__$Boot_HaxeError) ? ex9.val : ex9);
		}
		if(hx_doctest_internal_DocTestUtils.equals(left4,right4)) {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(true),"new MyObject(null) throws ~/must not be null/",{ lineNumber : 46, fileName : "src/Main.hx", className : "", methodName : ""})));
		} else {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(false),"new MyObject(null) throws ~/must not be null/ --> Expected `" + Std.string(right4) + "` but was `" + Std.string(left4) + "`.",{ lineNumber : 46, fileName : "src/Main.hx", className : "", methodName : ""})));
		}
		var left5 = "nothing";
		try {
			new MyObject("ab");
		} catch( ex10 ) {
			haxe_CallStack.lastException = ex10;
			left5 = ((ex10) instanceof js__$Boot_HaxeError) ? ex10.val : ex10;
		}
		var right5;
		try {
			right5 = "nothing";
		} catch( ex11 ) {
			haxe_CallStack.lastException = ex11;
			right5 = "exception: " + Std.string(((ex11) instanceof js__$Boot_HaxeError) ? ex11.val : ex11);
		}
		if(hx_doctest_internal_DocTestUtils.equals(left5,right5)) {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(true),"new MyObject(\"ab\") throws nothing",{ lineNumber : 47, fileName : "src/Main.hx", className : "", methodName : ""})));
		} else {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(false),"new MyObject(\"ab\") throws nothing --> Expected `" + Std.string(right5) + "` but was `" + Std.string(left5) + "`.",{ lineNumber : 47, fileName : "src/Main.hx", className : "", methodName : ""})));
		}
		var left6;
		try {
			left6 = "ab".length;
		} catch( ex12 ) {
			haxe_CallStack.lastException = ex12;
			left6 = "exception: " + Std.string(((ex12) instanceof js__$Boot_HaxeError) ? ex12.val : ex12) + hx_doctest_internal_DocTestUtils.exceptionStackAsString();
		}
		var right6;
		try {
			right6 = 1;
		} catch( ex13 ) {
			haxe_CallStack.lastException = ex13;
			right6 = "exception: " + Std.string(((ex13) instanceof js__$Boot_HaxeError) ? ex13.val : ex13) + hx_doctest_internal_DocTestUtils.exceptionStackAsString();
		}
		if(left6 > right6) {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(true),"new MyObject(\"ab\").length()  > 1",{ lineNumber : 57, fileName : "src/Main.hx", className : "", methodName : ""})));
		} else {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(false),"new MyObject(\"ab\").length()  > 1 --> Left side '" + Std.string(left6) + "' is not greater than '" + Std.string(right6) + "'.",{ lineNumber : 57, fileName : "src/Main.hx", className : "", methodName : ""})));
		}
		var left7;
		try {
			left7 = "ab".length;
		} catch( ex14 ) {
			haxe_CallStack.lastException = ex14;
			left7 = "exception: " + Std.string(((ex14) instanceof js__$Boot_HaxeError) ? ex14.val : ex14) + hx_doctest_internal_DocTestUtils.exceptionStackAsString();
		}
		var right7;
		try {
			right7 = 2;
		} catch( ex15 ) {
			haxe_CallStack.lastException = ex15;
			right7 = "exception: " + Std.string(((ex15) instanceof js__$Boot_HaxeError) ? ex15.val : ex15) + hx_doctest_internal_DocTestUtils.exceptionStackAsString();
		}
		if(left7 <= right7) {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(true),"new MyObject(\"ab\").length()  <= 2",{ lineNumber : 58, fileName : "src/Main.hx", className : "", methodName : ""})));
		} else {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(false),"new MyObject(\"ab\").length()  <= 2 --> Left side '" + Std.string(left7) + "' is not lower than or equal '" + Std.string(right7) + "'.",{ lineNumber : 58, fileName : "src/Main.hx", className : "", methodName : ""})));
		}
		var left8;
		try {
			left8 = "abc".length;
		} catch( ex16 ) {
			haxe_CallStack.lastException = ex16;
			left8 = "exception: " + Std.string(((ex16) instanceof js__$Boot_HaxeError) ? ex16.val : ex16) + hx_doctest_internal_DocTestUtils.exceptionStackAsString();
		}
		var right8;
		try {
			right8 = 2;
		} catch( ex17 ) {
			haxe_CallStack.lastException = ex17;
			right8 = "exception: " + Std.string(((ex17) instanceof js__$Boot_HaxeError) ? ex17.val : ex17) + hx_doctest_internal_DocTestUtils.exceptionStackAsString();
		}
		if(!hx_doctest_internal_DocTestUtils.equals(left8,right8)) {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(true),"new MyObject(\"abc\").length() != 2",{ lineNumber : 59, fileName : "src/Main.hx", className : "", methodName : ""})));
		} else {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(false),"new MyObject(\"abc\").length() != 2 --> Left side '" + Std.string(left8) + "' equals '" + Std.string(right8) + "'.",{ lineNumber : 59, fileName : "src/Main.hx", className : "", methodName : ""})));
		}
		var left9;
		try {
			left9 = "dog";
		} catch( ex18 ) {
			haxe_CallStack.lastException = ex18;
			left9 = "exception: " + Std.string(((ex18) instanceof js__$Boot_HaxeError) ? ex18.val : ex18) + hx_doctest_internal_DocTestUtils.exceptionStackAsString();
		}
		var right9;
		try {
			right9 = "dog";
		} catch( ex19 ) {
			haxe_CallStack.lastException = ex19;
			right9 = "exception: " + Std.string(((ex19) instanceof js__$Boot_HaxeError) ? ex19.val : ex19) + hx_doctest_internal_DocTestUtils.exceptionStackAsString();
		}
		if(hx_doctest_internal_DocTestUtils.equals(left9,right9)) {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(true),"({ var o=new MyObject(\"cat\"); o.setData(\"dog\"); o.data; }) == \"dog\"",{ lineNumber : 68, fileName : "src/Main.hx", className : "", methodName : ""})));
		} else {
			this.cases.push(new hx_doctest_internal_adapters_SingeAssertionCase(null,new tink_testrunner_Assertion(tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool(false),"({ var o=new MyObject(\"cat\"); o.setData(\"dog\"); o.data; }) == \"dog\" --> Left side '" + Std.string(left9) + "' does not equal '" + Std.string(right9) + "'.",{ lineNumber : 68, fileName : "src/Main.hx", className : "", methodName : ""})));
		}
	}
	,__class__: Main
});
var MyObject = function(data) {
	if(data == null) {
		throw new js__$Boot_HaxeError("[data] must not be null!");
	}
	this.data = data;
};
MyObject.__name__ = "MyObject";
MyObject.prototype = {
	__class__: MyObject
};
Math.__name__ = "Math";
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
var Type = function() { };
Type.__name__ = "Type";
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
		return false;
	}
	return true;
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = "haxe.CallStack";
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			var fileName = site.getFileName();
			var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
				fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g++];
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b = (b.b += "module ") + (m == null ? "null" : "" + m);
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b = (b.b += file == null ? "null" : "" + file) + " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b = (b.b += " column ") + (col == null ? "null" : "" + col);
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b = (b.b += cname == null ? "null" : "" + cname) + ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b = (b.b += "local function #") + (n == null ? "null" : "" + n);
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				var column = Std.parseInt(rie10.matched(4));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var hx_doctest_internal_DocTestUtils = function() { };
hx_doctest_internal_DocTestUtils.__name__ = "hx.doctest.internal.DocTestUtils";
hx_doctest_internal_DocTestUtils.exceptionStackAsString = function() {
	var stack = haxe_CallStack.exceptionStack();
	var i = -1;
	var _g = 0;
	_hx_loop1: while(_g < stack.length) {
		var elem = stack[_g];
		++_g;
		++i;
		switch(elem._hx_index) {
		case 2:
			var elem2 = elem.s;
			if(StringTools.startsWith(elem.file,"hx/doctest")) {
				stack = stack.slice(0,i);
				break _hx_loop1;
			}
			if(elem2 != null) {
				if(elem2 != null) {
					if(elem2._hx_index == 3) {
						if(StringTools.startsWith(elem2.classname,"hx.doctest.")) {
							stack = stack.slice(0,i);
							break _hx_loop1;
						}
					}
				}
			}
			break;
		case 3:
			if(StringTools.startsWith(elem.classname,"hx.doctest.")) {
				stack = stack.slice(0,i);
				break _hx_loop1;
			}
			break;
		default:
		}
	}
	return "  " + haxe_CallStack.toString(stack).split("\n").join("\n  ") + "\n";
};
hx_doctest_internal_DocTestUtils.equals = function(left,right) {
	if(((left) instanceof Array) && left.__enum__ == null && (((right) instanceof Array) && right.__enum__ == null)) {
		if(left.length == right.length) {
			var _g = 0;
			var _g1 = left.length;
			while(_g < _g1) {
				var i = _g++;
				if(!hx_doctest_internal_DocTestUtils.equals(left[i],right[i])) {
					return false;
				}
			}
			return true;
		}
		return false;
	}
	if(((right) instanceof EReg)) {
		return (js_Boot.__cast(right , EReg)).match(Std.string(left));
	}
	if(Reflect.isEnumValue(left) && Reflect.isEnumValue(right)) {
		return Type.enumEq(left,right);
	}
	if(Reflect.isObject(left) && Reflect.isObject(right)) {
		var o = left;
		var clsLeft = o == null ? null : js_Boot.getClass(o);
		var clsNameLeft = clsLeft == null ? null : clsLeft.__name__;
		var o1 = right;
		var clsRight = o1 == null ? null : js_Boot.getClass(o1);
		var clsRightName = clsRight == null ? null : clsRight.__name__;
		if(clsNameLeft == null && clsRightName == null) {
			var clsLeftFields = Reflect.fields(left);
			clsLeftFields.sort(function(x,y) {
				if(x > y) {
					return 1;
				} else if(x == y) {
					return 0;
				} else {
					return -1;
				}
			});
			var clsRightFields = Reflect.fields(left);
			clsRightFields.sort(function(x1,y1) {
				if(x1 > y1) {
					return 1;
				} else if(x1 == y1) {
					return 0;
				} else {
					return -1;
				}
			});
			if(hx_doctest_internal_DocTestUtils.equals(clsLeftFields,clsRightFields)) {
				var _g2 = 0;
				while(_g2 < clsLeftFields.length) {
					var f = clsLeftFields[_g2];
					++_g2;
					if(!hx_doctest_internal_DocTestUtils.equals(Reflect.field(clsLeft,f),Reflect.field(clsRight,f))) {
						return false;
					}
				}
				return true;
			}
		}
	}
	return left == right;
};
var tink_testrunner_CaseObject = function() { };
tink_testrunner_CaseObject.__name__ = "tink.testrunner.CaseObject";
tink_testrunner_CaseObject.prototype = {
	__class__: tink_testrunner_CaseObject
};
var tink_testrunner_BasicCase = function(pos) {
	this.pos = null;
	this.exclude = false;
	this.include = false;
	this.timeout = 5000;
	var c = js_Boot.getClass(this);
	this.info = { name : c.__name__, description : null, pos : pos};
};
tink_testrunner_BasicCase.__name__ = "tink.testrunner.BasicCase";
tink_testrunner_BasicCase.__interfaces__ = [tink_testrunner_CaseObject];
tink_testrunner_BasicCase.prototype = {
	execute: function() {
		return tink_streams__$Stream_Stream_$Impl_$.ofIterator(HxOverrides.iter([]));
	}
	,__class__: tink_testrunner_BasicCase
};
var hx_doctest_internal_adapters_SingeAssertionCase = function(pos,assertion) {
	tink_testrunner_BasicCase.call(this,pos);
	this.assertion = assertion;
};
hx_doctest_internal_adapters_SingeAssertionCase.__name__ = "hx.doctest.internal.adapters.SingeAssertionCase";
hx_doctest_internal_adapters_SingeAssertionCase.__super__ = tink_testrunner_BasicCase;
hx_doctest_internal_adapters_SingeAssertionCase.prototype = $extend(tink_testrunner_BasicCase.prototype,{
	execute: function() {
		return tink_streams__$Stream_Stream_$Impl_$.ofIterator(HxOverrides.iter([this.assertion]));
	}
	,__class__: hx_doctest_internal_adapters_SingeAssertionCase
});
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var tink_core__$Callback_Callback_$Impl_$ = {};
tink_core__$Callback_Callback_$Impl_$.__name__ = "tink.core._Callback.Callback_Impl_";
tink_core__$Callback_Callback_$Impl_$.invoke = function(this1,data) {
	if(tink_core__$Callback_Callback_$Impl_$.depth < 1000) {
		tink_core__$Callback_Callback_$Impl_$.depth++;
		this1(data);
		tink_core__$Callback_Callback_$Impl_$.depth--;
	} else {
		var _e = this1;
		var f = function(data1) {
			tink_core__$Callback_Callback_$Impl_$.invoke(_e,data1);
		};
		var data2 = data;
		tink_core__$Callback_Callback_$Impl_$.defer(function() {
			f(data2);
		});
	}
};
tink_core__$Callback_Callback_$Impl_$.fromNiladic = function(f) {
	return f;
};
tink_core__$Callback_Callback_$Impl_$.defer = function(f) {
	haxe_Timer.delay(f,0);
};
var tink_core__$Callback_LinkObject = function() { };
tink_core__$Callback_LinkObject.__name__ = "tink.core._Callback.LinkObject";
tink_core__$Callback_LinkObject.prototype = {
	__class__: tink_core__$Callback_LinkObject
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw new js__$Boot_HaxeError("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = "tink.core._Callback.ListCell";
tink_core__$Callback_ListCell.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	clear: function() {
		this.list = null;
		this.cb = null;
	}
	,cancel: function() {
		var _g = this.list;
		if(_g != null) {
			this.clear();
			HxOverrides.remove(_g,this);
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core__$Callback_CallbackList_$Impl_$ = {};
tink_core__$Callback_CallbackList_$Impl_$.__name__ = "tink.core._Callback.CallbackList_Impl_";
tink_core__$Callback_CallbackList_$Impl_$.add = function(this1,cb) {
	var node = new tink_core__$Callback_ListCell(cb,this1);
	this1.push(node);
	return node;
};
tink_core__$Callback_CallbackList_$Impl_$.invoke = function(this1,data) {
	var _g = 0;
	var _g1 = this1.slice();
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		if(cell.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cell.cb,data);
		}
	}
};
tink_core__$Callback_CallbackList_$Impl_$.clear = function(this1) {
	var _g = 0;
	var _g1 = this1.splice(0,this1.length);
	while(_g < _g1.length) _g1[_g++].clear();
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = "tink.core.TypedError";
tink_core_TypedError.prototype = {
	printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,__class__: tink_core_TypedError
};
var tink_core__$Future_FutureObject = function() { };
tink_core__$Future_FutureObject.__name__ = "tink.core._Future.FutureObject";
tink_core__$Future_FutureObject.prototype = {
	__class__: tink_core__$Future_FutureObject
};
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = "tink.core._Lazy.LazyObject";
tink_core__$Lazy_LazyObject.prototype = {
	__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = "tink.core._Lazy.LazyConst";
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	get: function() {
		return this.value;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = "tink.core._Future.SyncFuture";
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	map: function(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	,flatMap: function(f) {
		var l = this.value.map(f);
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return l.get().handle(cb);
		});
	}
	,handle: function(cb) {
		tink_core__$Callback_Callback_$Impl_$.invoke(cb,this.value.get());
		return null;
	}
	,gather: function() {
		return this;
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : true, __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
var tink_core__$Future_Future_$Impl_$ = {};
tink_core__$Future_Future_$Impl_$.__name__ = "tink.core._Future.Future_Impl_";
tink_core__$Future_Future_$Impl_$.next = function(this1,n) {
	return this1.flatMap(function(v) {
		return n(v);
	});
};
tink_core__$Future_Future_$Impl_$.flatten = function(f) {
	return new tink_core__$Future_NestedFuture(f);
};
tink_core__$Future_Future_$Impl_$.async = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(lazy) {
		return new tink_core__$Future_LazyTrigger(f);
	} else {
		var op = new tink_core_FutureTrigger();
		tink_core__$Callback_Callback_$Impl_$.invoke(f,$bind(op,op.trigger));
		return op;
	}
};
var tink_core__$Future_SimpleFuture = function(f) {
	this.f = f;
};
tink_core__$Future_SimpleFuture.__name__ = "tink.core._Future.SimpleFuture";
tink_core__$Future_SimpleFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SimpleFuture.prototype = {
	handle: function(callback) {
		return this.f(callback);
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var tmp = f(v);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,tmp);
			});
		});
	}
	,flatMap: function(f) {
		var f1 = f;
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.flatten(new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var tmp = f1(v);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,tmp);
			});
		}));
	}
	,gather: function() {
		if(this.gathered != null) {
			return this.gathered;
		} else {
			return this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		}
	}
	,__class__: tink_core__$Future_SimpleFuture
};
var tink_core__$Future_NestedFuture = function(outer) {
	this.outer = outer;
};
tink_core__$Future_NestedFuture.__name__ = "tink.core._Future.NestedFuture";
tink_core__$Future_NestedFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_NestedFuture.prototype = {
	map: function(f) {
		return this.outer.flatMap(function(inner) {
			return inner.map(f).gather();
		}).gather();
	}
	,flatMap: function(f) {
		return this.outer.flatMap(function(inner) {
			return inner.flatMap(f).gather();
		}).gather();
	}
	,gather: function() {
		if(this.gathered != null) {
			return this.gathered;
		} else {
			return this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		}
	}
	,handle: function(cb) {
		var ret = null;
		ret = this.outer.handle(function(inner) {
			ret = inner.handle(function(result) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,result);
			});
		});
		return ret;
	}
	,__class__: tink_core__$Future_NestedFuture
};
var tink_core_FutureTrigger = function() {
	this.list = [];
};
tink_core_FutureTrigger.__name__ = "tink.core.FutureTrigger";
tink_core_FutureTrigger.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core_FutureTrigger.gatherFuture = function(f) {
	var op = null;
	return new tink_core__$Future_SimpleFuture(function(cb) {
		if(op == null) {
			op = new tink_core_FutureTrigger();
			f.handle($bind(op,op.trigger));
			f = null;
		}
		return op.handle(cb);
	});
};
tink_core_FutureTrigger.prototype = {
	handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,this.result);
			return null;
		} else {
			return tink_core__$Callback_CallbackList_$Impl_$.add(_g,callback);
		}
	}
	,map: function(f) {
		if(this.list == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v) {
				var tmp = f(v);
				ret.trigger(tmp);
			});
			return ret;
		}
	}
	,flatMap: function(f) {
		if(this.list == null) {
			return f(this.result);
		} else {
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v) {
				f(v).handle($bind(ret,ret.trigger));
			});
			return ret;
		}
	}
	,gather: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			tink_core__$Callback_CallbackList_$Impl_$.invoke(list,result);
			tink_core__$Callback_CallbackList_$Impl_$.clear(list);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core__$Future_LazyTrigger = function(op) {
	this.op = op;
	tink_core_FutureTrigger.call(this);
};
tink_core__$Future_LazyTrigger.__name__ = "tink.core._Future.LazyTrigger";
tink_core__$Future_LazyTrigger.__super__ = tink_core_FutureTrigger;
tink_core__$Future_LazyTrigger.prototype = $extend(tink_core_FutureTrigger.prototype,{
	eager: function() {
		if(this.op != null) {
			var op = this.op;
			this.op = null;
			tink_core__$Callback_Callback_$Impl_$.invoke(op,$bind(this,this.trigger));
		}
		return this;
	}
	,map: function(f) {
		var _gthis = this;
		if(this.op == null) {
			return tink_core_FutureTrigger.prototype.map.call(this,f);
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				_gthis.handle(function(v) {
					var tmp = f(v);
					cb(tmp);
				});
			},true);
		}
	}
	,flatMap: function(f) {
		var _gthis = this;
		if(this.op == null) {
			return tink_core_FutureTrigger.prototype.flatMap.call(this,f);
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				_gthis.handle(function(v) {
					f(v).handle(cb);
				});
			},true);
		}
	}
	,handle: function(cb) {
		this.eager();
		return tink_core_FutureTrigger.prototype.handle.call(this,cb);
	}
	,__class__: tink_core__$Future_LazyTrigger
});
var tink_core__$Lazy_LazyFunc = function(f) {
	this.f = f;
};
tink_core__$Lazy_LazyFunc.__name__ = "tink.core._Lazy.LazyFunc";
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	get: function() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var tmp = _gthis.get();
			return f(tmp);
		});
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : true, __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = "tink.core.OutcomeTools";
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome._hx_index == 0) {
		return true;
	} else {
		return false;
	}
};
var tink_core__$Promise_Promise_$Impl_$ = {};
tink_core__$Promise_Promise_$Impl_$.__name__ = "tink.core._Promise.Promise_Impl_";
tink_core__$Promise_Promise_$Impl_$.next = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			return f(o.data);
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(o.failure)));
		}
	});
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
var tink_core__$Promise_Next_$Impl_$ = {};
tink_core__$Promise_Next_$Impl_$.__name__ = "tink.core._Promise.Next_Impl_";
tink_core__$Promise_Next_$Impl_$.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
var tink_streams_StreamObject = function() { };
tink_streams_StreamObject.__name__ = "tink.streams.StreamObject";
tink_streams_StreamObject.prototype = {
	__class__: tink_streams_StreamObject
};
var tink_streams_StreamBase = function() {
};
tink_streams_StreamBase.__name__ = "tink.streams.StreamBase";
tink_streams_StreamBase.__interfaces__ = [tink_streams_StreamObject];
tink_streams_StreamBase.prototype = {
	forEach: function(handler) {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,__class__: tink_streams_StreamBase
};
var tink_streams__$Stream_Stream_$Impl_$ = {};
tink_streams__$Stream_Stream_$Impl_$.__name__ = "tink.streams._Stream.Stream_Impl_";
tink_streams__$Stream_Stream_$Impl_$.ofIterator = function(i) {
	var next = null;
	next = function(step) {
		step(i.hasNext() ? tink_streams_Step.Link(i.next(),tink_streams_Generator.stream(next)) : tink_streams_Step.End);
	};
	return tink_streams_Generator.stream(next);
};
var tink_streams_Handled = $hxEnums["tink.streams.Handled"] = { __ename__ : true, __constructs__ : ["BackOff","Finish","Resume","Clog"]
	,BackOff: {_hx_index:0,__enum__:"tink.streams.Handled",toString:$estr}
	,Finish: {_hx_index:1,__enum__:"tink.streams.Handled",toString:$estr}
	,Resume: {_hx_index:2,__enum__:"tink.streams.Handled",toString:$estr}
	,Clog: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.Handled",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Conclusion = $hxEnums["tink.streams.Conclusion"] = { __ename__ : true, __constructs__ : ["Halted","Clogged","Failed","Depleted"]
	,Halted: ($_=function(rest) { return {_hx_index:0,rest:rest,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["rest"],$_)
	,Clogged: ($_=function(error,at) { return {_hx_index:1,error:error,at:at,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:2,error:error,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Depleted: {_hx_index:3,__enum__:"tink.streams.Conclusion",toString:$estr}
};
var tink_streams__$Stream_Handler_$Impl_$ = {};
tink_streams__$Stream_Handler_$Impl_$.__name__ = "tink.streams._Stream.Handler_Impl_";
tink_streams__$Stream_Handler_$Impl_$.ofSafe = function(f) {
	return f;
};
var tink_streams_Generator = function(upcoming) {
	tink_streams_StreamBase.call(this);
	this.upcoming = upcoming;
};
tink_streams_Generator.__name__ = "tink.streams.Generator";
tink_streams_Generator.stream = function(step) {
	return new tink_streams_Generator(tink_core__$Future_Future_$Impl_$.async(step,true));
};
tink_streams_Generator.__super__ = tink_streams_StreamBase;
tink_streams_Generator.prototype = $extend(tink_streams_StreamBase.prototype,{
	forEach: function(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.upcoming.handle(function(e) {
				switch(e._hx_index) {
				case 0:
					var then = e.next;
					handler(e.value).handle(function(s) {
						switch(s._hx_index) {
						case 0:
							cb(tink_streams_Conclusion.Halted(_gthis));
							break;
						case 1:
							cb(tink_streams_Conclusion.Halted(then));
							break;
						case 2:
							then.forEach(handler).handle(cb);
							break;
						case 3:
							cb(tink_streams_Conclusion.Clogged(s.e,_gthis));
							break;
						}
					});
					break;
				case 1:
					cb(tink_streams_Conclusion.Failed(e.e));
					break;
				case 2:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		},true);
	}
	,__class__: tink_streams_Generator
});
var tink_streams_Step = $hxEnums["tink.streams.Step"] = { __ename__ : true, __constructs__ : ["Link","Fail","End"]
	,Link: ($_=function(value,next) { return {_hx_index:0,value:value,next:next,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["value","next"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["e"],$_)
	,End: {_hx_index:2,__enum__:"tink.streams.Step",toString:$estr}
};
var tink_testrunner_Assertion = function(holds,description,pos) {
	this.holds = holds;
	this.description = description;
	this.pos = pos;
};
tink_testrunner_Assertion.__name__ = "tink.testrunner.Assertion";
tink_testrunner_Assertion.prototype = {
	__class__: tink_testrunner_Assertion
};
var tink_testrunner__$Assertion_AssertionResult_$Impl_$ = {};
tink_testrunner__$Assertion_AssertionResult_$Impl_$.__name__ = "tink.testrunner._Assertion.AssertionResult_Impl_";
tink_testrunner__$Assertion_AssertionResult_$Impl_$.ofBool = function(v) {
	if(v) {
		return tink_core_Outcome.Success(tink_core_Noise.Noise);
	} else {
		return tink_core_Outcome.Failure(null);
	}
};
var tink_testrunner__$Case_Case_$Impl_$ = {};
tink_testrunner__$Case_Case_$Impl_$.__name__ = "tink.testrunner._Case.Case_Impl_";
tink_testrunner__$Case_Case_$Impl_$.shouldRun = function(this1,includeMode) {
	if(!this1.exclude) {
		if(!(!includeMode)) {
			return this1.include;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
var tink_testrunner_Reporter = function() { };
tink_testrunner_Reporter.__name__ = "tink.testrunner.Reporter";
tink_testrunner_Reporter.prototype = {
	__class__: tink_testrunner_Reporter
};
var tink_testrunner_ReportType = $hxEnums["tink.testrunner.ReportType"] = { __ename__ : true, __constructs__ : ["BatchStart","SuiteStart","CaseStart","Assertion","CaseFinish","SuiteFinish","BatchFinish"]
	,BatchStart: {_hx_index:0,__enum__:"tink.testrunner.ReportType",toString:$estr}
	,SuiteStart: ($_=function(info,hasCasesToRun) { return {_hx_index:1,info:info,hasCasesToRun:hasCasesToRun,__enum__:"tink.testrunner.ReportType",toString:$estr}; },$_.__params__ = ["info","hasCasesToRun"],$_)
	,CaseStart: ($_=function(info,shouldRun) { return {_hx_index:2,info:info,shouldRun:shouldRun,__enum__:"tink.testrunner.ReportType",toString:$estr}; },$_.__params__ = ["info","shouldRun"],$_)
	,Assertion: ($_=function(assertion) { return {_hx_index:3,assertion:assertion,__enum__:"tink.testrunner.ReportType",toString:$estr}; },$_.__params__ = ["assertion"],$_)
	,CaseFinish: ($_=function(result) { return {_hx_index:4,result:result,__enum__:"tink.testrunner.ReportType",toString:$estr}; },$_.__params__ = ["result"],$_)
	,SuiteFinish: ($_=function(result) { return {_hx_index:5,result:result,__enum__:"tink.testrunner.ReportType",toString:$estr}; },$_.__params__ = ["result"],$_)
	,BatchFinish: ($_=function(result) { return {_hx_index:6,result:result,__enum__:"tink.testrunner.ReportType",toString:$estr}; },$_.__params__ = ["result"],$_)
};
var tink_testrunner_Formatter = function() { };
tink_testrunner_Formatter.__name__ = "tink.testrunner.Formatter";
tink_testrunner_Formatter.prototype = {
	__class__: tink_testrunner_Formatter
};
var tink_testrunner_BasicFormatter = function() {
};
tink_testrunner_BasicFormatter.__name__ = "tink.testrunner.BasicFormatter";
tink_testrunner_BasicFormatter.__interfaces__ = [tink_testrunner_Formatter];
tink_testrunner_BasicFormatter.prototype = {
	success: function(v) {
		return this.color(v,"green");
	}
	,error: function(v) {
		return this.color(v,"red");
	}
	,info: function(v) {
		return this.color(v,"yellow");
	}
	,extra: function(v) {
		return this.color(v,"cyan");
	}
	,mute: function(v) {
		return this.color(v,"blue");
	}
	,color: function(v,c) {
		return v;
	}
	,__class__: tink_testrunner_BasicFormatter
};
var tink_testrunner_BasicReporter = function(formatter) {
	this.noise = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
	this.formatter = formatter != null ? formatter : new tink_testrunner_BasicFormatter();
};
tink_testrunner_BasicReporter.__name__ = "tink.testrunner.BasicReporter";
tink_testrunner_BasicReporter.__interfaces__ = [tink_testrunner_Reporter];
tink_testrunner_BasicReporter.prototype = {
	report: function(type) {
		switch(type._hx_index) {
		case 0:
			break;
		case 1:
			var info = type.info;
			if(type.hasCasesToRun) {
				this.println(" ");
				var m = this.formatter.info(info.name) + ": ";
				if(info.pos != null) {
					m += this.formatter.extra("[" + info.pos.fileName + ":" + info.pos.lineNumber + "]");
				}
				this.println(m);
			}
			break;
		case 2:
			var info1 = type.info;
			if(type.shouldRun) {
				var m1 = this.formatter.info(this.indent(info1.name,2)) + ": ";
				if(info1.pos != null) {
					m1 += this.formatter.extra("[" + info1.pos.fileName + ":" + info1.pos.lineNumber + "] ");
				}
				if(info1.description != null) {
					m1 += this.formatter.mute(info1.description);
				}
				this.println(m1);
			}
			break;
		case 3:
			var assertion = type.assertion;
			var failure = null;
			var holds;
			var _g = assertion.holds;
			switch(_g._hx_index) {
			case 0:
				holds = this.formatter.success("[OK]");
				break;
			case 1:
				failure = _g.failure;
				holds = this.formatter.error("[FAIL]");
				break;
			}
			this.println(this.indent("- " + holds + " " + this.formatter.extra("[" + assertion.pos.fileName + ":" + assertion.pos.lineNumber + "]") + " " + assertion.description,4));
			if(failure != null) {
				this.println(this.formatter.error(this.indent(failure,8)));
			}
			break;
		case 4:
			var result = type.result.result;
			if(result._hx_index == 1) {
				this.println(this.formatter.error(this.indent("- " + this.formatError(result.e),4)));
			}
			break;
		case 5:
			var _g1 = type.result.result;
			switch(_g1._hx_index) {
			case 0:
				break;
			case 1:
				this.println(this.formatter.error(this.indent("Setup Failed: " + this.formatError(_g1.e),2)));
				break;
			case 2:
				this.println(this.formatter.error(this.indent("Teardown Failed: " + this.formatError(_g1.e),2)));
				break;
			}
			break;
		case 6:
			var summary = tink_testrunner__$Runner_BatchResult_$Impl_$.summary(type.result);
			var total = summary.assertions.length;
			var failures = 0;
			var errors = 0;
			var _g2 = 0;
			var _g11 = summary.failures;
			while(_g2 < _g11.length) if(_g11[_g2++]._hx_index == 0) {
				++failures;
			} else {
				++errors;
			}
			var success = total - failures;
			var m_b = "";
			m_b = "" + (total == null ? "null" : "" + total);
			m_b += " Assertion";
			if(total > 1) {
				m_b += "s";
			}
			m_b += "   ";
			m_b += success == null ? "null" : "" + success;
			m_b += " Success";
			m_b += "   ";
			m_b += failures == null ? "null" : "" + failures;
			m_b += " Failure";
			if(failures > 1) {
				m_b += "s";
			}
			m_b += "   ";
			m_b += errors == null ? "null" : "" + errors;
			m_b += " Error";
			if(errors > 1) {
				m_b += "s";
			}
			var m2 = m_b += "   ";
			this.println(" ");
			this.println(failures == 0 && errors == 0 ? this.formatter.success(m2) : this.formatter.error(m2));
			this.println(" ");
			break;
		}
		return this.noise;
	}
	,println: function(v) {
		window.console.log(v);
	}
	,indent: function(v,i) {
		if(i == null) {
			i = 0;
		}
		return v.split("\n").map(function(line) {
			return StringTools.lpad(""," ",i) + line;
		}).join("\n");
	}
	,formatError: function(e) {
		var str = e.toString();
		if(e.data != null) {
			str += "\n" + Std.string(e.data);
		}
		return str;
	}
	,__class__: tink_testrunner_BasicReporter
};
var tink_testrunner_Runner = function() { };
tink_testrunner_Runner.__name__ = "tink.testrunner.Runner";
tink_testrunner_Runner.run = function(batch,reporter,timers) {
	if(reporter == null) {
		reporter = new tink_testrunner_BasicReporter();
	}
	if(timers == null) {
		timers = new tink_testrunner_HaxeTimerManager();
	}
	var includeMode = false;
	var _g = 0;
	var _g1 = batch;
	while(_g < _g1.length) {
		var s = _g1[_g++];
		if(includeMode) {
			break;
		}
		var _g2 = 0;
		var _g11 = s.cases;
		while(_g2 < _g11.length) if(_g11[_g2++].include) {
			includeMode = true;
			break;
		}
	}
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		reporter.report(tink_testrunner_ReportType.BatchStart).handle(function(_) {
			var iter = HxOverrides.iter(batch);
			var results = [];
			var next = null;
			next = function() {
				if(iter.hasNext()) {
					tink_testrunner_Runner.runSuite(iter.next(),reporter,timers,includeMode).handle(function(o) {
						results.push(o);
						reporter.report(tink_testrunner_ReportType.SuiteFinish(o)).handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(next));
					});
				} else {
					var f = cb;
					var a1 = results;
					var next1 = function() {
						f(a1);
					};
					reporter.report(tink_testrunner_ReportType.BatchFinish(results)).handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(next1));
				}
			};
			next();
		});
	});
};
tink_testrunner_Runner.runSuite = function(suite,reporter,timers,includeMode) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		var hasCases = tink_testrunner__$Suite_Suite_$Impl_$.getCasesToBeRun(suite,includeMode).length > 0;
		reporter.report(tink_testrunner_ReportType.SuiteStart(suite.info,hasCases)).handle(function(_) {
			var setup = function() {
				if(hasCases) {
					return suite.setup();
				} else {
					return tink_core__$Promise_Promise_$Impl_$.NOISE;
				}
			};
			var teardown = function() {
				if(hasCases) {
					return suite.teardown();
				} else {
					return tink_core__$Promise_Promise_$Impl_$.NOISE;
				}
			};
			var iter = HxOverrides.iter(suite.cases);
			var results = [];
			var next = null;
			next = function() {
				if(iter.hasNext()) {
					var caze = iter.next();
					tink_testrunner_Runner.runCase(caze,suite,reporter,timers,tink_testrunner__$Case_Case_$Impl_$.shouldRun(caze,includeMode)).handle(function(r) {
						results.push(r);
						next();
					});
				} else {
					teardown().handle(function(o) {
						var next1;
						switch(o._hx_index) {
						case 0:
							next1 = tink_testrunner_SuiteResultType.Success(results);
							break;
						case 1:
							next1 = tink_testrunner_SuiteResultType.TeardownFailed(o.failure,results);
							break;
						}
						cb({ info : suite.info, result : next1});
					});
				}
			};
			setup().handle(function(o1) {
				switch(o1._hx_index) {
				case 0:
					next();
					break;
				case 1:
					cb({ info : suite.info, result : tink_testrunner_SuiteResultType.SetupFailed(o1.failure)});
					break;
				}
			});
		});
	});
};
tink_testrunner_Runner.runCase = function(caze,suite,reporter,timers,shouldRun) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		if(shouldRun) {
			reporter.report(tink_testrunner_ReportType.CaseStart(caze.info,shouldRun)).handle(function(_) {
				tink_core__$Promise_Promise_$Impl_$.next(tink_core__$Promise_Promise_$Impl_$.next(tink_testrunner_TimeoutHelper.timeout(suite.before(),caze.timeout,timers,caze.pos),function(_1) {
					var assertions = [];
					return tink_testrunner_TimeoutHelper.timeout(tink_core__$Future_Future_$Impl_$.next(caze.execute().forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(a) {
						assertions.push(a);
						return reporter.report(tink_testrunner_ReportType.Assertion(a)).map(function(_2) {
							return tink_streams_Handled.Resume;
						}).gather();
					})),tink_core__$Promise_Next_$Impl_$.ofSafe(function(o) {
						switch(o._hx_index) {
						case 0:
							throw new js__$Boot_HaxeError("unreachable");
						case 2:
							return tink_core_Outcome.Failure(o.error);
						case 3:
							return tink_core_Outcome.Success(assertions);
						}
					})),caze.timeout,timers,{ fileName : "tink/testrunner/Runner.hx", lineNumber : 107, className : "tink.testrunner.Runner", methodName : "runCase"});
				}),function(result) {
					return tink_core__$Promise_Promise_$Impl_$.next(tink_testrunner_TimeoutHelper.timeout(suite.after(),caze.timeout,timers,caze.pos),function(_3) {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(result)));
					});
				}).handle(function(result1) {
					var results;
					switch(result1._hx_index) {
					case 0:
						results = tink_testrunner_CaseResultType.Succeeded(result1.data);
						break;
					case 1:
						results = tink_testrunner_CaseResultType.Failed(result1.failure);
						break;
					}
					var results1 = { info : caze.info, result : results};
					reporter.report(tink_testrunner_ReportType.CaseFinish(results1)).handle(function(_4) {
						cb(results1);
					});
				});
			});
		} else {
			reporter.report(tink_testrunner_ReportType.CaseStart(caze.info,shouldRun)).handle(function(_5) {
				var results2 = { info : caze.info, result : tink_testrunner_CaseResultType.Excluded};
				reporter.report(tink_testrunner_ReportType.CaseFinish(results2)).handle(function(_6) {
					cb(results2);
				});
			});
		}
	});
};
var tink_testrunner_TimeoutHelper = function() { };
tink_testrunner_TimeoutHelper.__name__ = "tink.testrunner.TimeoutHelper";
tink_testrunner_TimeoutHelper.timeout = function(promise,ms,timers,pos) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		var done = false;
		var timer = null;
		var link = promise.handle(function(o) {
			done = true;
			if(timer != null) {
				timer.stop();
			}
			cb(o);
		});
		if(!done && timers != null) {
			timer = timers.schedule(ms,function() {
				if(link != null) {
					link.cancel();
				}
				cb(tink_core_Outcome.Failure(new tink_core_TypedError(null,"Timed out after " + ms + " ms",pos)));
			});
		}
	});
};
var tink_testrunner__$Runner_BatchResult_$Impl_$ = {};
tink_testrunner__$Runner_BatchResult_$Impl_$.__name__ = "tink.testrunner._Runner.BatchResult_Impl_";
tink_testrunner__$Runner_BatchResult_$Impl_$.summary = function(this1) {
	var ret = { assertions : [], failures : []};
	var handleCases = function(cases) {
		var _g = 0;
		while(_g < cases.length) {
			var _g1 = cases[_g++].result;
			switch(_g1._hx_index) {
			case 0:
				var assertions = _g1.assertions;
				ret.assertions = ret.assertions.concat(assertions);
				var ret1 = ret.failures;
				var handleCases1 = assertions.filter(function(a) {
					return !tink_core_OutcomeTools.isSuccess(a.holds);
				}).map(function(a1) {
					return tink_testrunner_FailureType.AssertionFailed(a1);
				});
				ret.failures = ret1.concat(handleCases1);
				break;
			case 1:
				ret.failures.push(tink_testrunner_FailureType.CaseFailed(_g1.e));
				break;
			case 2:
				break;
			}
		}
	};
	var _g2 = 0;
	while(_g2 < this1.length) {
		var _g3 = this1[_g2++].result;
		switch(_g3._hx_index) {
		case 0:
			handleCases(_g3.cases);
			break;
		case 1:
			ret.failures.push(tink_testrunner_FailureType.SuiteFailed(_g3.e));
			break;
		case 2:
			handleCases(_g3.cases);
			ret.failures.push(tink_testrunner_FailureType.SuiteFailed(_g3.e));
			break;
		}
	}
	return ret;
};
var tink_testrunner_SuiteResultType = $hxEnums["tink.testrunner.SuiteResultType"] = { __ename__ : true, __constructs__ : ["Success","SetupFailed","TeardownFailed"]
	,Success: ($_=function(cases) { return {_hx_index:0,cases:cases,__enum__:"tink.testrunner.SuiteResultType",toString:$estr}; },$_.__params__ = ["cases"],$_)
	,SetupFailed: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.testrunner.SuiteResultType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TeardownFailed: ($_=function(e,cases) { return {_hx_index:2,e:e,cases:cases,__enum__:"tink.testrunner.SuiteResultType",toString:$estr}; },$_.__params__ = ["e","cases"],$_)
};
var tink_testrunner_CaseResultType = $hxEnums["tink.testrunner.CaseResultType"] = { __ename__ : true, __constructs__ : ["Succeeded","Failed","Excluded"]
	,Succeeded: ($_=function(assertions) { return {_hx_index:0,assertions:assertions,__enum__:"tink.testrunner.CaseResultType",toString:$estr}; },$_.__params__ = ["assertions"],$_)
	,Failed: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.testrunner.CaseResultType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Excluded: {_hx_index:2,__enum__:"tink.testrunner.CaseResultType",toString:$estr}
};
var tink_testrunner_FailureType = $hxEnums["tink.testrunner.FailureType"] = { __ename__ : true, __constructs__ : ["AssertionFailed","CaseFailed","SuiteFailed"]
	,AssertionFailed: ($_=function(assertion) { return {_hx_index:0,assertion:assertion,__enum__:"tink.testrunner.FailureType",toString:$estr}; },$_.__params__ = ["assertion"],$_)
	,CaseFailed: ($_=function(err) { return {_hx_index:1,err:err,__enum__:"tink.testrunner.FailureType",toString:$estr}; },$_.__params__ = ["err"],$_)
	,SuiteFailed: ($_=function(err) { return {_hx_index:2,err:err,__enum__:"tink.testrunner.FailureType",toString:$estr}; },$_.__params__ = ["err"],$_)
};
var tink_testrunner__$Suite_Suite_$Impl_$ = {};
tink_testrunner__$Suite_Suite_$Impl_$.__name__ = "tink.testrunner._Suite.Suite_Impl_";
tink_testrunner__$Suite_Suite_$Impl_$.getCasesToBeRun = function(this1,includeMode) {
	return this1.cases.filter(function(c) {
		return tink_testrunner__$Case_Case_$Impl_$.shouldRun(c,includeMode);
	});
};
var tink_testrunner_Timer = function() { };
tink_testrunner_Timer.__name__ = "tink.testrunner.Timer";
tink_testrunner_Timer.prototype = {
	__class__: tink_testrunner_Timer
};
var tink_testrunner_TimerManager = function() { };
tink_testrunner_TimerManager.__name__ = "tink.testrunner.TimerManager";
tink_testrunner_TimerManager.prototype = {
	__class__: tink_testrunner_TimerManager
};
var tink_testrunner_HaxeTimer = function(ms,f) {
	this.timer = haxe_Timer.delay(f,ms);
};
tink_testrunner_HaxeTimer.__name__ = "tink.testrunner.HaxeTimer";
tink_testrunner_HaxeTimer.__interfaces__ = [tink_testrunner_Timer];
tink_testrunner_HaxeTimer.prototype = {
	stop: function() {
		if(this.timer != null) {
			this.timer.stop();
			this.timer = null;
		}
	}
	,__class__: tink_testrunner_HaxeTimer
};
var tink_testrunner_HaxeTimerManager = function() {
};
tink_testrunner_HaxeTimerManager.__name__ = "tink.testrunner.HaxeTimerManager";
tink_testrunner_HaxeTimerManager.__interfaces__ = [tink_testrunner_TimerManager];
tink_testrunner_HaxeTimerManager.prototype = {
	schedule: function(ms,f) {
		return new tink_testrunner_HaxeTimer(ms,f);
	}
	,__class__: tink_testrunner_HaxeTimerManager
};
var $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
js_Boot.__toStr = ({ }).toString;
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
global.window = {console:console}
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
tink_core__$Callback_Callback_$Impl_$.depth = 0;
tink_core__$Promise_Promise_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
